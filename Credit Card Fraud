{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "24e5aca5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import itertools\n",
    "\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score \n",
    "from sklearn.metrics import f1_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f75f9ffc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         V1        V2        V3        V4        V5        V6        V7  \\\n",
      "0 -1.359807 -0.072781  2.536347  1.378155 -0.338321  0.462388  0.239599   \n",
      "1  1.191857  0.266151  0.166480  0.448154  0.060018 -0.082361 -0.078803   \n",
      "2 -1.358354 -1.340163  1.773209  0.379780 -0.503198  1.800499  0.791461   \n",
      "3 -0.966272 -0.185226  1.792993 -0.863291 -0.010309  1.247203  0.237609   \n",
      "4 -1.158233  0.877737  1.548718  0.403034 -0.407193  0.095921  0.592941   \n",
      "\n",
      "         V8        V9       V10  ...       V21       V22       V23       V24  \\\n",
      "0  0.098698  0.363787  0.090794  ... -0.018307  0.277838 -0.110474  0.066928   \n",
      "1  0.085102 -0.255425 -0.166974  ... -0.225775 -0.638672  0.101288 -0.339846   \n",
      "2  0.247676 -1.514654  0.207643  ...  0.247998  0.771679  0.909412 -0.689281   \n",
      "3  0.377436 -1.387024 -0.054952  ... -0.108300  0.005274 -0.190321 -1.175575   \n",
      "4 -0.270533  0.817739  0.753074  ... -0.009431  0.798278 -0.137458  0.141267   \n",
      "\n",
      "        V25       V26       V27       V28  Amount  Class  \n",
      "0  0.128539 -0.189115  0.133558 -0.021053  149.62      0  \n",
      "1  0.167170  0.125895 -0.008983  0.014724    2.69      0  \n",
      "2 -0.327642 -0.139097 -0.055353 -0.059752  378.66      0  \n",
      "3  0.647376 -0.221929  0.062723  0.061458  123.50      0  \n",
      "4 -0.206010  0.502292  0.219422  0.215153   69.99      0  \n",
      "\n",
      "[5 rows x 30 columns]\n"
     ]
    }
   ],
   "source": [
    "data = pd.read_csv('creditcard.csv')\n",
    "data.drop('Time', axis = 1, inplace = True)\n",
    "\n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "252aa364",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Cases: 284807\n",
      "Total Non-Fraud Cases: 284315\n",
      "Total Fraud Cases: 492\n"
     ]
    }
   ],
   "source": [
    "cases = len(data)\n",
    "nonfraud_count = len(data[data.Class == 0])\n",
    "fraud_count = len(data[data.Class == 1])\n",
    "\n",
    "print('Total Cases: {}'.format(cases))\n",
    "print('Total Non-Fraud Cases: {}'.format(nonfraud_count))\n",
    "print('Total Fraud Cases: {}'.format(fraud_count))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4369cebd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "count    284315.000000\n",
      "mean         88.291022\n",
      "std         250.105092\n",
      "min           0.000000\n",
      "25%           5.650000\n",
      "50%          22.000000\n",
      "75%          77.050000\n",
      "max       25691.160000\n",
      "Name: Amount, dtype: float64\n",
      "count     492.000000\n",
      "mean      122.211321\n",
      "std       256.683288\n",
      "min         0.000000\n",
      "25%         1.000000\n",
      "50%         9.250000\n",
      "75%       105.890000\n",
      "max      2125.870000\n",
      "Name: Amount, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "nonfraud_cases = data[data.Class ==0]\n",
    "fraud_cases = data[data.Class ==1]\n",
    "\n",
    "print(nonfraud_cases.Amount.describe())\n",
    "print(fraud_cases.Amount.describe())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "e02cac32",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0    0.244964\n",
      "1   -0.342475\n",
      "2    1.160686\n",
      "3    0.140534\n",
      "4   -0.073403\n",
      "5   -0.338556\n",
      "6   -0.333279\n",
      "7   -0.190107\n",
      "8    0.019392\n",
      "9   -0.338516\n",
      "Name: Amount, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# normalization\n",
    "sc = StandardScaler()\n",
    "amount = data['Amount'].values\n",
    "\n",
    "data['Amount'] = sc.fit_transform(amount.reshape(-1, 1))\n",
    "\n",
    "print(data['Amount'].head(10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "161fdcce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train samples:  [[-1.11504743  1.03558276  0.80071244 -1.06039825  0.03262117  0.85342216\n",
      "  -0.61424348 -3.23116112  1.53994798 -0.81690879 -1.30559201  0.1081772\n",
      "  -0.85960958 -0.07193421  0.90665563 -1.72092961  0.79785322 -0.0067594\n",
      "   1.95677806 -0.64489556  3.02038533 -0.53961798  0.03315649 -0.77494577\n",
      "   0.10586781 -0.43085348  0.22973694 -0.0705913  -0.30145418]]\n",
      "X_test samples:  [[-0.32333357  1.05745525 -0.04834115 -0.60720431  1.25982115 -0.09176072\n",
      "   1.1591015  -0.12433461 -0.17463954 -1.64440065 -1.11886302  0.20264731\n",
      "   1.14596495 -1.80235956 -0.24717793 -0.06094535  0.84660574  0.37945439\n",
      "   0.84726224  0.18640942 -0.20709827 -0.43389027 -0.26161328 -0.04665061\n",
      "   0.2115123   0.00829721  0.10849443  0.16113917 -0.19330595]]\n",
      "y_train samples:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n",
      "y_test samples:  [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]\n"
     ]
    }
   ],
   "source": [
    "# data split\n",
    "\n",
    "X = data.drop('Class', axis = 1).values\n",
    "y = data['Class'].values\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)\n",
    "\n",
    "print('X_train samples: ', X_train[:1])\n",
    "print('X_test samples: ', X_test[:1])\n",
    "print('y_train samples: ', y_train[0:20])\n",
    "print('y_test samples: ', y_train[0:20])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "abd96478",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Decision Tree\n",
    "tree_model = DecisionTreeClassifier(max_depth = 4, criterion = 'entropy')\n",
    "tree_model.fit(X_train, y_train)\n",
    "tree_yhat = tree_model.predict(X_test)\n",
    "\n",
    "# K-Nearest Neighbor\n",
    "n = 5\n",
    "knn = KNeighborsClassifier(n_neighbors = n)\n",
    "knn.fit(X_train, y_train)\n",
    "knn_yhat = knn.predict(X_test)\n",
    "\n",
    "# Random Forest Tree\n",
    "rf = RandomForestClassifier(max_depth = 4)\n",
    "rf.fit(X_train, y_train)\n",
    "rf_yhat = rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "23736664",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Model Accuracy Score: 0.9993679997191109\n",
      "K-Nearest Neighbor Model Accuracy Score: 0.9995259997893332\n",
      "Random Forest Tree Model Accuracy Score: 0.9992977774656788\n"
     ]
    }
   ],
   "source": [
    "# Accuracy Score\n",
    "print('Decision Tree Model Accuracy Score: {}'.format(accuracy_score(y_test, tree_yhat)))\n",
    "print('K-Nearest Neighbor Model Accuracy Score: {}'.format(accuracy_score(y_test, knn_yhat)))\n",
    "print('Random Forest Tree Model Accuracy Score: {}'.format(accuracy_score(y_test, rf_yhat)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "98619f4d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Decision Tree Model F1 Score: 0.8105263157894738\n",
      "K-Nearest Neighbor Model F1 Score: 0.8571428571428572\n",
      "Random Forest Tree Model F1 Score: 0.7727272727272727\n"
     ]
    }
   ],
   "source": [
    "# F1 Score\n",
    "print('Decision Tree Model F1 Score: {}'.format(f1_score(y_test, tree_yhat)))\n",
    "print('K-Nearest Neighbor Model F1 Score: {}'.format(f1_score(y_test, knn_yhat)))\n",
    "print('Random Forest Tree Model F1 Score: {}'.format(f1_score(y_test, rf_yhat)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "5fe77e90",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Confusion Matrix\n",
    "def plot_confusion_matrix(cm, classes, title, normalize = False, cmap = plt.cm.Blues):\n",
    "    title = 'Confusion Matrix of {}'.format(title)\n",
    "    if normalize:\n",
    "        cm = cm.astype(float) / cm.sum(axis=1)[:, np.newaxis]\n",
    "\n",
    "    plt.imshow(cm, interpolation = 'nearest', cmap = cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation = 45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment = 'center',\n",
    "                 color = 'white' if cm[i, j] > thresh else 'black')\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    \n",
    "tree_matrix = confusion_matrix(y_test, tree_yhat, labels = [0,1])\n",
    "knn_matrix = confusion_matrix(y_test, knn_yhat, labels = [0,1])\n",
    "rf_matrix = confusion_matrix(y_test, rf_yhat, labels = [0,1])\n",
    "\n",
    "plt.rcParams['figure.figsize'] = (6, 6)\n",
    "\n",
    "# Decision Tree\n",
    "tree_cm_plot = plot_confusion_matrix(tree_matrix, \n",
    "                                classes = ['Non-Default(0)','Default(1)'], \n",
    "                                normalize = False, title = 'Decision Tree')\n",
    "plt.savefig('tree_cm_plot.png')\n",
    "plt.show()\n",
    "\n",
    "# K-Nearest\n",
    "knn_cm_plot = plot_confusion_matrix(knn_matrix, \n",
    "                                classes = ['Non-Default(0)','Default(1)'], \n",
    "                                normalize = False, title = 'KNN')\n",
    "plt.savefig('knn_cm_plot.png')\n",
    "plt.show()\n",
    "\n",
    "#Random Forest\n",
    "rf_cm_plot = plot_confusion_matrix(rf_matrix, \n",
    "                                classes = ['Non-Default(0)','Default(1)'], \n",
    "                                normalize = False, title = 'Random Forest Tree')\n",
    "plt.savefig('rf_cm_plot.png')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c49e2a88",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
